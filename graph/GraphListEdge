//VertexOBJ 

public class VertexObj<V, E> {
    protected V info;
    protected int position;

    public VertexObj(V info, int position) {
        this.info = info;
        this.position = position;
    }

    public V getInfo() {
        return info;
    }

    @Override
    public boolean equals(Object obj) {
        if (obj instanceof VertexObj<?, ?>) {
            VertexObj<?, ?> v = (VertexObj<?, ?>) obj;
            return this.info.equals(v.info);
        }
        return false;
    }

    @Override
    public String toString() {
        return info.toString();
    }
}

//EdgeOBJ

public class EdgeObj<V, E> {
    protected E info;
    protected VertexObj<V, E> endVertex1;
    protected VertexObj<V, E> endVertex2;
    protected int position;

    public EdgeObj(VertexObj<V, E> vert1, VertexObj<V, E> vert2, E info, int position) {
        this.endVertex1 = vert1;
        this.endVertex2 = vert2;
        this.info = info;
        this.position = position;
    }

    public boolean connects(VertexObj<V, E> v1, VertexObj<V, E> v2) {
        return (endVertex1.equals(v1) && endVertex2.equals(v2)) ||
               (endVertex1.equals(v2) && endVertex2.equals(v1)); // grafo no dirigido
    }

    @Override
    public String toString() {
        return "(" + endVertex1 + " -- " + info + " -- " + endVertex2 + ")";
    }
}

//GraphListEdge 
import java.util.*;

public class GraphListEdge<V, E> {
    ArrayList<VertexObj<V, E>> secVertex;
    ArrayList<EdgeObj<V, E>> secEdge;

    public GraphListEdge() {
        this.secVertex = new ArrayList<>();
        this.secEdge = new ArrayList<>();
    }
}

