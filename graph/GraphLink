public class GraphLink<E> {
    protected ListLinked<Vertex<E>> listVertex;

    public GraphLink() {
        listVertex = new ListLinked<Vertex<E>>();
    }

    public void insertVertex(E data) {
        Vertex<E> v = new Vertex<>(data);
        if (listVertex.search(v) == -1) {
            listVertex.insertLast(v);
        }
    }

    public void insertEdge(E verOri, E verDes) {
        int posOri = listVertex.search(new Vertex<>(verOri));
        int posDes = listVertex.search(new Vertex<>(verDes));

        if (posOri == -1 || posDes == -1) return;

        Vertex<E> vOri = listVertex.get(posOri);
        Vertex<E> vDes = listVertex.get(posDes);

        Edge<E> edge1 = new Edge<>(vDes);
        Edge<E> edge2 = new Edge<>(vOri);

        if (vOri.listAdj.search(edge1) == -1) vOri.listAdj.insertLast(edge1);
        if (vDes.listAdj.search(edge2) == -1) vDes.listAdj.insertLast(edge2);
    }

    public String toString() {
        return this.listVertex.toString();

    }
    
    //Search Vertex
    public boolean searchVertex(E data) {
    return listVertex.search(new Vertex<>(data)) != -1;
}
    //search Edge
public boolean searchEdge(E v, E z) {
    int posV = listVertex.search(new Vertex<>(v));
    if (posV == -1) return false;
    Vertex<E> vertexV = listVertex.get(posV);
    return vertexV.listAdj.search(new Edge<>(new Vertex<>(z))) != -1;
}

//remove vertex
public void removeVertex(E data) {
    int pos = listVertex.search(new Vertex<>(data));
    if (pos == -1) return;

    Vertex<E> v = listVertex.get(pos);

    // Eliminar las aristas de otros nodos que apuntan a este
    for (int i = 0; i < listVertex.size(); i++) {
        Vertex<E> current = listVertex.get(i);
        if (!current.equals(v)) {
            current.listAdj.remove(new Edge<>(v));
        }
    }

    // Eliminar vértice del grafo
    listVertex.remove(v);
}


//remove Edge
    public void removeEdge(E v, E z) {
    int posV = listVertex.search(new Vertex<>(v));
    int posZ = listVertex.search(new Vertex<>(z));
    if (posV == -1 || posZ == -1) return;

    Vertex<E> vertexV = listVertex.get(posV);
    Vertex<E> vertexZ = listVertex.get(posZ);

    vertexV.listAdj.remove(new Edge<>(vertexZ));
    vertexZ.listAdj.remove(new Edge<>(vertexV));
}

    //DFS
    public void dfs(E data) {
    boolean[] visited = new boolean[listVertex.size()];
    int startIndex = listVertex.search(new Vertex<>(data));
    if (startIndex != -1) {
        dfsRecursive(startIndex, visited);
    }
}

private void dfsRecursive(int index, boolean[] visited) {
    visited[index] = true;
    Vertex<E> v = listVertex.get(index);
    System.out.print(v.getData() + " ");

    for (int i = 0; i < v.listAdj.size(); i++) {
        Edge<E> edge = v.listAdj.get(i);
        Vertex<E> neighbor = edge.refDest;
        int neighborIndex = listVertex.search(neighbor);
        if (!visited[neighborIndex]) {
            dfsRecursive(neighborIndex, visited);
        }
    }

}

    //BFS
public void bfs(E v) {
    boolean[] visited = new boolean[listVertex.size()];
    Queue<Vertex<E>> queue = new LinkedList<>();

    int startIndex = listVertex.search(new Vertex<>(v));
    if (startIndex == -1) return;

    Vertex<E> start = listVertex.get(startIndex);
    visited[startIndex] = true;
    queue.add(start);

    while (!queue.isEmpty()) {
        Vertex<E> current = queue.poll();
        System.out.print(current.getData() + " ");

        for (int i = 0; i < current.listAdj.size(); i++) {
            Vertex<E> neighbor = current.listAdj.get(i).refDest;
            int neighborIndex = listVertex.search(neighbor);
            if (!visited[neighborIndex]) {
                visited[neighborIndex] = true;
                queue.add(neighbor);
            }
        }
    }
}




    //BFSPAHT
public ArrayList<E> bfsPath(E start, E end) {
    Map<Vertex<E>, Vertex<E>> parent = new HashMap<>();
    boolean[] visited = new boolean[listVertex.size()];
    Queue<Vertex<E>> queue = new LinkedList<>();

    int startIndex = listVertex.search(new Vertex<>(start));
    if (startIndex == -1) return null;

    Vertex<E> startV = listVertex.get(startIndex);
    visited[startIndex] = true;
    queue.add(startV);

    while (!queue.isEmpty()) {
        Vertex<E> current = queue.poll();
        if (current.getData().equals(end)) break;

        for (int i = 0; i < current.listAdj.size(); i++) {
            Vertex<E> neighbor = current.listAdj.get(i).refDest;
            int neighborIndex = listVertex.search(neighbor);
            if (!visited[neighborIndex]) {
                visited[neighborIndex] = true;
                parent.put(neighbor, current);
                queue.add(neighbor);
            }
        }
    }

    ArrayList<E> path = new ArrayList<>();
    Vertex<E> target = new Vertex<>(end);
    int targetIndex = listVertex.search(target);
    if (targetIndex == -1 || !parent.containsKey(listVertex.get(targetIndex))) return null;

    Vertex<E> current = listVertex.get(targetIndex);
    while (current != null && !current.getData().equals(start)) {
        path.add(0, current.getData());
        current = parent.get(current);
    }
    path.add(0, start);
    return path;
}


//  insertEdgeWeight
    public void insertEdgeWeight(E v, E z, int w) {
        insertVertex(v);
        insertVertex(z);

        int posV = listVertex.search(new Vertex<>(v));
        int posZ = listVertex.search(new Vertex<>(z));

        Vertex<E> vertexV = listVertex.get(posV);
        Vertex<E> vertexZ = listVertex.get(posZ);

        if (vertexV.listAdj.search(new Edge<>(vertexZ)) == -1) {
            vertexV.listAdj.insertLast(new Edge<>(vertexZ, w));
        }
        if (vertexZ.listAdj.search(new Edge<>(vertexV)) == -1) {
            vertexZ.listAdj.insertLast(new Edge<>(vertexV, w));
        }
    }


    // Shortpath
    public ArrayList<E> shortPath(E v, E z) {
        Map<Vertex<E>, Integer> dist = new HashMap<>();
        Map<Vertex<E>, Vertex<E>> prev = new HashMap<>();
        PriorityQueue<Vertex<E>> pq = new PriorityQueue<>((a, b) -> dist.get(a) - dist.get(b));

        for (int i = 0; i < listVertex.size(); i++) {
            Vertex<E> u = listVertex.get(i);
            dist.put(u, Integer.MAX_VALUE);
            prev.put(u, null);
        }

        Vertex<E> source = listVertex.get(listVertex.search(new Vertex<>(v)));
        dist.put(source, 0);
        pq.add(source);
        while (!pq.isEmpty()) {
            Vertex<E> u = pq.poll();
            for (int i = 0; i < u.listAdj.size(); i++) {
                Edge<E> edge = u.listAdj.get(i);
                Vertex<E> neighbor = edge.refDest;
                int alt = dist.get(u) + edge.weight;
                if (alt < dist.get(neighbor)) {
                    dist.put(neighbor, alt);
                    prev.put(neighbor, u);
                    pq.add(neighbor);
                }
            }
        }

        ArrayList<E> path = new ArrayList<>();
        Vertex<E> current = listVertex.get(listVertex.search(new Vertex<>(z)));
        while (current != null) {
            path.add(0, current.getData());
            current = prev.get(current);
        }

        return path;
    }

    //isConexo
    public boolean isConexo() {
    boolean[] visited = new boolean[listVertex.size()];
    dfsRecursive(0, visited); // desde el primer vértice

    for (boolean v : visited) {
        if (!v) return false;
    }
    return true;
}


    //Dijktra
    public Stack<E> Dijkstra(E v, E z) {
    ArrayList<E> path = shortPath(v, z);
    if (path == null) return null;

    Stack<E> stack = new Stack<>();
    for (E elem : path) {
        stack.push(elem);
    }
    return stack;
}

//gradoNodo
public int gradoNodo(E v) {
    int pos = listVertex.search(new Vertex<>(v));
    if (pos == -1) return -1;
    return listVertex.get(pos).listAdj.size();
}

//esCamino
public boolean esCamino() {
    int extremos = 0;
    for (int i = 0; i < listVertex.size(); i++) {
        int grado = listVertex.get(i).listAdj.size();
        if (grado == 1) extremos++;
        else if (grado != 2) return false;
    }
    return extremos == 2;
}

-//esCiclo
public boolean esCiclo() {
    for (int i = 0; i < listVertex.size(); i++) {
        if (listVertex.get(i).listAdj.size() != 2) return false;
    }
    return true;
}


//esRueda
public boolean esRueda() {
    int n = listVertex.size();
    if (n < 4) return false;

    int centro = -1;
    int contadorCentro = 0;

    for (int i = 0; i < n; i++) {
        int grado = listVertex.get(i).listAdj.size();
        if (grado == n - 1) {
            centro = i;
            contadorCentro++;
        }
    }

    if (contadorCentro != 1) return false;

    // Verificar que el resto tenga grado 3 (ciclo entre ellos + conexión al centro)
    for (int i = 0; i < n; i++) {
        if (i == centro) continue;
        int grado = listVertex.get(i).listAdj.size();
        if (grado != 3) return false;
    }

    return true;
}

//esCompleto
public boolean esCompleto() {
    int n = listVertex.size();
    for (int i = 0; i < n; i++) {
        int grado = listVertex.get(i).listAdj.size();
        if (grado != n - 1) return false;
    }
    return true;
}

//Formal 
public void printFormal() {
    System.out.print("Vértices: ");
    for (int i = 0; i < listVertex.size(); i++) {
        System.out.print(listVertex.get(i).getData() + " ");
    }
    System.out.println("\nAristas: ");
    Set<String> mostradas = new HashSet<>();
    for (int i = 0; i < listVertex.size(); i++) {
        Vertex<E> v = listVertex.get(i);
        for (int j = 0; j < v.listAdj.size(); j++) {
            E origen = v.getData();
            E destino = v.listAdj.get(j).refDest.getData();
            String arista = origen + "-" + destino;
            String aristaInvertida = destino + "-" + origen;
            if (!mostradas.contains(arista) && !mostradas.contains(aristaInvertida)) {
                System.out.println("{" + origen + ", " + destino + "}");
                mostradas.add(arista);
            }
        }
    }
}

//Lista Adyacensia
public void printListaAdyacencia() {
    for (int i = 0; i < listVertex.size(); i++) {
        Vertex<E> v = listVertex.get(i);
        System.out.print(v.getData() + ": ");
        for (int j = 0; j < v.listAdj.size(); j++) {
            System.out.print(v.listAdj.get(j).refDest.getData() + " ");
        }
        System.out.println();
    }
}

//Matriz de Adyacencia
public void printMatrizAdyacencia() {
    int n = listVertex.size();
    int[][] matriz = new int[n][n];

    for (int i = 0; i < n; i++) {
        Vertex<E> v = listVertex.get(i);
        for (int j = 0; j < v.listAdj.size(); j++) {
            Vertex<E> destino = v.listAdj.get(j).refDest;
            int idx = listVertex.search(destino);
            matriz[i][idx] = 1;
        }
    }

    System.out.print("   ");
    for (int i = 0; i < n; i++) System.out.print(listVertex.get(i).getData() + " ");
    System.out.println();

    for (int i = 0; i < n; i++) {
        System.out.print(listVertex.get(i).getData() + ": ");
        for (int j = 0; j < n; j++) {
            System.out.print(matriz[i][j] + " ");
        }
        System.out.println();
    }
}

//GRafo Dirigido 
public int gradoEntrada(E v) {
    int count = 0;
    int idx = listVertex.search(new Vertex<>(v));
    if (idx == -1) return -1;
    Vertex<E> target = listVertex.get(idx);
    for (int i = 0; i < listVertex.size(); i++) {
        if (i == idx) continue;
        Vertex<E> source = listVertex.get(i);
        for (int j = 0; j < source.listAdj.size(); j++) {
            if (source.listAdj.get(j).refDest.equals(target)) {
                count++;
            }
        }
    }
    return count;
}

public int gradoSalida(E v) {
    int idx = listVertex.search(new Vertex<>(v));
    if (idx == -1) return -1;
    return listVertex.get(idx).listAdj.size();
}



}

