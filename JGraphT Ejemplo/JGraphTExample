import org.jgrapht.*;
import org.jgrapht.graph.*;
import org.jgrapht.alg.shortestpath.DijkstraShortestPath;
import org.jgrapht.alg.connectivity.ConnectivityInspector;

import java.util.List;

public class JGraphTExample {
    public static void main(String[] args) {
        // Crear un grafo dirigido ponderado
        Graph<String, DefaultWeightedEdge> graph = new DirectedWeightedMultigraph<>(DefaultWeightedEdge.class);

        // Agregar vértices
        graph.addVertex("A");
        graph.addVertex("B");
        graph.addVertex("C");
        graph.addVertex("D");

        // Agregar aristas con pesos
        graph.setEdgeWeight(graph.addEdge("A", "B"), 4.0);
        graph.setEdgeWeight(graph.addEdge("A", "C"), 2.0);
        graph.setEdgeWeight(graph.addEdge("C", "B"), 1.0);
        graph.setEdgeWeight(graph.addEdge("B", "D"), 5.0);
        graph.setEdgeWeight(graph.addEdge("C", "D"), 8.0);

        // Mostrar el grafo
        System.out.println("Vertices: " + graph.vertexSet());
        System.out.println("Aristas: " + graph.edgeSet());

        // Camino más corto de A a D
        DijkstraShortestPath<String, DefaultWeightedEdge> dijkstra = new DijkstraShortestPath<>(graph);
        GraphPath<String, DefaultWeightedEdge> path = dijkstra.getPath("A", "D");
        System.out.println("\nCamino más corto de A a D: " + path.getVertexList());
        System.out.println("Longitud total del camino: " + path.getWeight());

        // Verificar conectividad (solo funciona con grafos no dirigidos)
        Graph<String, DefaultEdge> simpleGraph = new SimpleGraph<>(DefaultEdge.class);
        simpleGraph.addVertex("X");
        simpleGraph.addVertex("Y");
        simpleGraph.addEdge("X", "Y");

        ConnectivityInspector<String, DefaultEdge> inspector = new ConnectivityInspector<>(simpleGraph);
        System.out.println("\n¿Es conexo el grafo no dirigido simple? " + inspector.isConnected());
    }
}
